#include <pcl16/io/pcd_io.h>
#include <pcl16/point_types.h>

#include <pcl/registration/icp.h>
#include "utils_pcd.h"

#include <pcl/filters/filter_indices.h>
#include <pcl/filters/voxel_grid.h>
#include "clouds/get_chessboard_pose.h"

#include <pcl/registration/transforms.h>

using namespace std;

int main(int argc, char*argv[]){
    pcl::PointCloud<pcl::PointXYZRGBA>::Ptr master (new pcl::PointCloud<pcl::PointXYZRGBA>);
    pcl::PointCloud<pcl::PointXYZRGBA>::Ptr current (new pcl::PointCloud<pcl::PointXYZRGBA>);
    std::vector<int> index;
    if(argc>1){
        for(int i=1; i<argc; i++)
        {
            try{
                current = readPCD(argv[i]);
            }
            catch{
                PCL_ERROR ("Couldn't read file test_pcd.pcd \n");
                return (-1);
            }
            //filter the cloud
            //pcl::removeNaNFromPointCloud(*current,*current,index);

            /*
            float downsample = 0.002f;
            //downsample the cloud to make icp faster
            pcl::VoxelGrid<pcl::PointXYZRGBA> sor;
            sor.setInputCloud (current);
            sor.setLeafSize (downsample,downsample,downsample);
            sor.filter (*current);
            */

        }
//        pcl::io::savePCDFileBinary ("test.pcd", *master);
    }
    return (0);
}
